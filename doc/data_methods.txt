Loading method to be used by each data\ file


 **************************************** THIS FILE IS OUTDATED *************************************

Methods:
	by diff is look into the differences between the files in modloader dir and the original game file..
	replace is to replace the entire file content (replacing the CFileMgr::Open string)
	not used, well, the file is not even used by the game...
	need to understand format means that, we need to understand the format beforing reaching a conclusion

<DATAFILE>         <METHOD>
--------------------------------------
animgrp.dat        by diff
animviewer.dat     not used
ar_stats.dat       by diff
carcols.dat        by diff
cargrp.dat         by diff
carmods.dat        by diff
clothes.dat        need to understand format
fonts.dat          replace
furnitur.dat       not used
gridref.dat        replace, not used at all
default.dat		   by diff
gta.dat            by diff
gta_quick.dat      not used
handling.cfg       by diff
melee.dat          need to understand format
numplate.dat       not used
object.dat         by diff
ped.dat            by diff
pedgrp.dat         by diff
pedstats.dat       by diff
plants.dat         need to understand format
polydensity.dat    not used
popcycle.dat       by diff
procobj.dat        by diff (I think this file is not used at all by the game)
shopping.dat       by diff
statdisp.dat       by diff
surface.dat        not used 
surfaud.dat        by diff
surfinfo.dat       by diff
timecyc.dat        by diff
timecycp.dat       not used
water.dat          by diff
water1.dat         not used
weapon.dat         by diff

new files:
modloader.dat       custom

----------------------------------------------------------------------------------
model   = string24
gxt     = string32
pathstr = string128
obj_id = uint16

Changing model to obj_id would be cool in some circustances such as in:
    cargrp
    carmods
    others

remember the algorithm:
lines.find(key) == lines.end() // means value not present
count[ SValue(key.data) ]      // counting based on key data

When the key.data (value) is dummy that means it's operator== always return true
and it do not store anything, the key stores everything it needs

----------------------------------------------------------------------------------

===========================================================================================================================================
animgrp.dat:
    formats:
        def = %s %s %s %d
        val = %s
        rule = <<<<<<<<<<<<<<<<<
        
    animtype:
        walkcycle
        
    key:
        enum        animtype
        string      name

    value:
        enum        animtype
        string32    name
        string32    ifp
        integer     numanims
        string32    anims[6]
        

===========================================================================================================================================
ar_stats.dat:
    formats:
        def = %d %s %f
        rule = exist anywhere (actually it must be complete)
        
    key:
        integer id
        
    value:
        integer id
        float   f
        ; string is ignored

===========================================================================================================================================
carcols.dat:
    format:
        def =
            col     = %d %d %d
            car     = %s %d %d [%d %d %d %d %d %d %d %d %d %d %d %d %d %d]
            car4    = %s %d %d %d %d [%d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d]

        rule = <<<<<<<<<<<<<<<<<

    key:
        enum section
        union
        {
            col  = integer id;
            car  = model   car;
            car4 = model   car;
        };
        
    value:
        enum section
        union
        {
            col  = ineger id; char r, g, b, a;
            car  = model car, integer color[8][2];
            car4 = model car; integer color[8][4];
        };
        

===========================================================================================================================================
cargrp.dat:
    format:
        def = [%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s]
        rule = exist anywhere (actually it must be complete)
        
    key:
        integer index
        
    value:
        integer index   ; unecessary?
        model   model[23]
        


===========================================================================================================================================

carmods.dat:

    format:
        def =
            link    = %s %s
            mods    = %s [%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s]
            wheel   = %d [%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s]
        
        rule = exist in default but not in custom? removed <<<<<<<<<<<
        
        
    key:
        enum section
        union
        {
            link  = model mod
            mods  = model car
            wheel = integer id
        };
        
    value:
        enum section
        union
        {
            link  = model mod;  model linked;
            mods  = model car;  model mods[18];
            wheel = integer id; model wheels[15];
        };
        
===========================================================================================================================================
default.dat, gta.dat:
    format:
        def = all of them have the format: %s %[^\r\n]    (that's %SECTION %PATH)
            img
            texdiction
            modelfile
            hierfile
            colfile
            ide
            ipl
            splash      ; Ignorable
            exit        ; Throw Warning
        
        rule = <<<<<<<<<<<


    key:
        enum    section
        pathstr path    ; Normalized
    
    value:
        dummy

===========================================================================================================================================
handling.cfg:
    format:
        def = 
            [ ] data    = %s %f %f %f %f %f %f %f %d %f %f %f %d %f %f %f %c %c %f %f %c %f %f %f %f %f %f %f %f %f %f %d %x %x %c %c %d
            [%] boat    = %s %f %f %f %f %f %f %f %f %f %f %f %f %f %f
            [!] bike    = %s %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f 
            [$] plane   = %s %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f
            [^] anim    = %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %f %f %f %f %f %f %f %f %f %f %f %f %f %d
       
        rule = <<<<<<<<<<<<<<

    key:
        enum    section
        union
        {
            data, boat, bike, plane = model   namesection
            anim                    = integer xid;
        };

    value:
        enum section
        union
        {
            data =
            {
                model name;
                float mass;
                float turnmass;
                float dragmult;
                float notused;
                float cmassx;
                float cmassy;
                float cmassz;
                integer submerg;
                float   tractionmult;
                float   tractionloss;
                float   tractionbias;
                integer ngears;
                float   maxvelocity;
                float   eacceleration;
                float   einertia;
                char    drivetype;
                char    enginetype;
                float   bdeceleration;
                float   bbias;
                char    babs;
                float   sterlock;
                float   sforce;
                float   sdamping;
                float   sspd;
                float   sulimit;
                float   sllimit;
                float   sfrbias;
                float   sadmult;
                float   seatoffset;
                float   damagemult;
                integer monetary;
                flags   mflags;
                flags   hflags;
                char    flight;
                char    rlight;
                integer animgroup;
            };
            
            boat =
            {
                model name;
                float a[14];
            };
            
            bike =
            {
                model name;
                float a[15];
            };
        
            plane =
            {
                model name;
                float a[21];
            };
            
            anim =
            {
                integer xid;
                integer a[20];
                complex   b[13];
                integer xflags;
            };
        };

===========================================================================================================================================
object.dat:
    format:
        def = %s %f %f %f %f %f %f %f %d %d %d %d %d %f %f %f %s [%f %f %f %f %f %d %d]
        rule = <<<<<<<<<<<<<<<<<<<

    key:
        model   name
        
    value:
        model   name
        float   a[7]
        integer b[5]
        float   c[3]
        string  fxname
        float   d[5]
        integer e[2]
        
===========================================================================================================================================
ped.dat:        
    format:
        def = %s
        val = %s [%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s]
        rule = <<<<<<<<<<<<<<<<<<<<

    key:
        string pedtype
             
    value:
        string pedtype
        string respect[32]
        string hate[32]
        string like[32]
        string dislike[32]
        
===========================================================================================================================================
pedgrp.dat:
    format:
        def = [%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s]
        rule = exist anywhere (actually it must be complete)

    key:
        integer index
        
    value:
        integer index   ; unecessary?
        model   model[21]  
        
===========================================================================================================================================
pedstats.dat:
    format:
        def = %s %f %f %d %d %d %d %f %f %d %d
        rule = exist anywhere (actually it must be complete)

    key:
        integer index
        
    value:
        integer index   ; unecessary?
        ; string is unused, index is used instead
        float   flee
        float   headrate
        byte    fear
        byte    temper
        byte    lawfullness
        byte    sexiness
        float   attack
        float   defend
        byte    shoot
        byte    decision

===========================================================================================================================================
popcycle.dat:
    format:
        def = %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d
        rule = exist anywhere (actually it must be complete)

    key:
        ; by priority
        byte section = BUSINESS, DESERT, ENTERTAINMENT, COUNTRYSIDE, RESIDENTIAL_RICH, RESIDENTIAL_AVERAGE, RESIDENTIAL_POOR, GANGLAND BEACH, SHOPPING PARK, INDUSTRY, ENTERTAINMENT_BUSY, SHOPPING_BUSY, SHOPPING_POSH, RESIDENTIAL_RICH_SECLUDED, AIRPORT GOLF_CLUB, OUT_OF_TOWN_FACTORY, AIRPORT_RUNWAY
        byte day     = WEEKDAY, WEEKEND
        byte hour    = 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22
        
    value:
        byte a[24]

===========================================================================================================================================
shopping.dat:

    TODO

===========================================================================================================================================
statdisp.dat:
    
    TODO
    
===========================================================================================================================================
surface.dat:
    format:
        def = %s %d %d %d %d %d %d %d %d %d
        rule = <<<<<<<<<<<<<<<

    key:
        string name
        
    value:
        string name
        ; could be bitfields:
        byte concrete
        byte grass
        byte sand
        byte gravel
        byte wood
        byte water
        byte metal
        byte longrass
        byte tile

    
===========================================================================================================================================
surfinfo.dat:
    format:
        def = %s %s %f %f %s %s %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %s
        ruke = <<<<<<<<<<<<<<

    key:
        string name
        
    value:
        string name
        string adhesion
        float a[2]
        string b[2]
        integer c[29]
        string d[1]
     
===========================================================================================================================================   
timecyc.dat:
    TODO
    rule = same as popcycle.dat

===========================================================================================================================================
weapon.dat:
    TODO
    rule = <<<<<<<<<<<<<<<<<<
    


